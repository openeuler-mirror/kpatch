From f6d53ba1e5d1b8c8e026bd537235e201f8482065 Mon Sep 17 00:00:00 2001
From: Zhipeng Xie <xiezhipeng1@huawei.com>
Date: Fri, 2 Nov 2018 17:25:38 +0000
Subject: [PATCH 07/21] create-diff-object: create dynamic relocs for changed
 functions in this object

Currently, we only create dynamic relocs for changed functions of
other objects, but not this object. It will cause a problem like:

original:       funcA and funcB         (funcA calls funcB)
patch-1:        funcA-1 and funcB-1     (funcA-1 calls funcB-1)
patch-2:        funcB-2         (funcA-1 should call funcB-2)

But as we don't create dynamic relocs for funcA-1, it will call
funcB-1 directly (not by jumping from funcB). So the new funcB-2
will not get called. This patch will create dynamic relocs for
all the changed functions, including changed ones in this object.

Reported-by: Xie Zhipeng <xiezhipeng1@huawei.com>
Tested-by: Zhou Chengming <zhouchengming1@huawei.com>
Signed-off-by: Zhou Chengming <zhouchengming1@huawei.com>
Signed-off-by: Li Bin <huawei.libin@huawei.com>
Signed-off-by: Zhipeng Xie <xiezhipeng1@huawei.com>
---
 kpatch-build/create-diff-object.c | 20 ++++++++++++++++----
 1 file changed, 16 insertions(+), 4 deletions(-)

diff --git a/kpatch-build/create-diff-object.c b/kpatch-build/create-diff-object.c
index 2cda233..67c062e 100644
--- a/kpatch-build/create-diff-object.c
+++ b/kpatch-build/create-diff-object.c
@@ -2897,6 +2897,14 @@ static void kpatch_create_intermediate_sections(struct kpatch_elf *kelf,
 			 */
 			if (may_need_dynrela(rela))
 				toc_rela(rela)->need_dynrela = 1;
+			if (rela->sym->sec) {
+				if (rela->sym->type == STT_FUNC &&
+					rela->sym->status == CHANGED &&
+					rela->sym->sec != sec->base &&
+					sec->base->sym &&
+					sec->base->sym->type == STT_FUNC)
+				toc_rela(rela)->need_dynrela = 1;
+			}
 		}
 	}
 
@@ -2979,10 +2987,14 @@ static void kpatch_create_intermediate_sections(struct kpatch_elf *kelf,
 				/* An unchanged local symbol */
 				ret = lookup_local_symbol(table,
 					rela->sym->name, &result);
-				if (ret)
-					ERROR("lookup_local_symbol %s needed for %s",
-					      rela->sym->name, sec->base->name);
-
+				if (ret) {
+					/* maybe it is a global symbol converted in kpatch_create_patches_sections*/
+					ret = lookup_global_symbol(table,
+						rela->sym->name, &result);
+					if (ret) 
+						ERROR("lookup_local_symbol %s needed for %s",
+								rela->sym->name, sec->base->name);
+				}
 			}
 			else if (vmlinux) {
 				/*
-- 
2.18.1
